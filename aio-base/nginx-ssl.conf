gzip on;
gzip_vary on;
gzip_proxied any;
gzip_types
	text/plain
	text/css
	application/javascript
	application/json
	application/x-javascript
	text/xml
	application/xml
	application/xml+rss
	text/javascript;

upstream tomcat {
	server 127.0.0.1:8080;
}

server {
    listen 80;
    server_name ${NGINX_HOST};
    return 301 https://${NGINX_HOST}:${NGINX_PORT}$request_uri;
}

server {
	listen       443 ssl http2;
	server_name  ${NGINX_HOST};

	root /var/lib/tomcat/webapps/static;

	ssl on;
	ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers               'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS';
	ssl_prefer_server_ciphers on;
	ssl_session_timeout       5m;
	ssl_session_cache         shared:SSL:50m;
	ssl_session_tickets       off;
	ssl_certificate           certs/nginx.crt;
	ssl_certificate_key       certs/nginx.key;
	ssl_dhparam               certs/dhparam.pem;

	add_header Strict-Transport-Security "max-age=31536000" always;

	location @proxy {
		proxy_http_version 1.1;
		proxy_buffering off;
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Server $host;
		proxy_set_header X-Forwarded-Proto https;

		# Mitigate httpoxy attack
		proxy_set_header Proxy "";

		proxy_pass http://tomcat;

		# rewrite Location header, so we that don't have to change tomcat server.xml
		proxy_redirect ~^(https?://[^/]+)(/.*)$ https://$http_host$2;
	}

	location / {
		try_files $uri @proxy;
	}

	location ~ gzip.(js|css)$ {
		rewrite ^(.*?)\.gzip\.(js|css)$ $1.min.$2;
	}

	location ~ (.*?)/(lib|js|css|img|ico|dist|partials)/(.*) {
		try_files /$2/$3 @proxy;
		expires 1M;
  		access_log off;
  		add_header Cache-Control "public";
	}
}
